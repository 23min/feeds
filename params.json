{"name":"Feed Server","tagline":"Erlang Social Feeds and Cache Server","body":"Feed Server\r\n===========\r\n\r\nOverview\r\n--------\r\n\r\nFeed Server is node of user workers pool (shards). It handles all MQ requests for\r\nwrite operations for user's data and other APIs. Also it stores a cache for user data.\r\nFeed Server manages spawning those workers on startup and supervising them.\r\nYou could create your own workers based on consumer behavior provided by Feed Server.\r\n\r\nFeed Server is a product that can be used for:\r\n\r\n* Handling partitioned distributed cache\r\n* Distribution worker proccesses connected to MQ bus\r\n* Providing sequential consistency for DHT\r\n* Notifications handlers: mailers, background workers, etc.\r\n\r\nDependencies\r\n------------\r\n\r\n* mqs (RabbitMQ client library)\r\n* kvs (KV storages abstraction layer)\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky\r\n* Andrii Zadorozhnii\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}